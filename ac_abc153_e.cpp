//https://atcoder.jp/contests/abc153/tasks/abc153_e
#include<bits/stdc++.h>
#define rep(i,a,b) for(int i=a;i<b;i++)
#define rrep(i,a,b) for(int i=a;i>=b;i--)
#define fore(i,a) for(auto &i:a)
#define all(x) (x).begin(),(x).end()
//#pragma GCC optimize ("-O3")
using namespace std; void _main(); int main() { cin.tie(0); ios::sync_with_stdio(false); _main(); }
typedef long long ll; const int inf = INT_MAX / 2; const ll infl = 1LL << 60;
template<class T>bool chmax(T& a, const T& b) { if (a < b) { a = b; return 1; } return 0; }
template<class T>bool chmin(T& a, const T& b) { if (b < a) { a = b; return 1; } return 0; }
//---------------------------------------------------------------------------------------------------
/*---------------------------------------------------------------------------------------------------
　　　　　　　　　　　 ∧＿∧
　　　　　 ∧＿∧ 　（´<_｀ ）　 Welcome to My Coding Space!
　　　　 （ ´_ゝ`）　/　 ⌒i     @hamayanhamayan0
　　　　／　　　＼　 　  |　|
　　　 /　　 /￣￣￣￣/　　|
　 ＿_(__ﾆつ/　    ＿/ .| .|＿＿＿＿
　 　　　＼/＿＿＿＿/　（u　⊃
---------------------------------------------------------------------------------------------------*/














int H, N, A[1010], B[1010];
int dp[1010][10101];
//---------------------------------------------------------------------------------------------------
void _main() {
	cin >> H >> N;
	rep(i, 0, N) cin >> A[i] >> B[i];

	rep(i, 0, N + 1) rep(h, 0, H + 1) dp[i][h] = inf;
	dp[0][H] = 0;

	rep(i, 0, N) rrep(h, H, 0) {
		chmin(dp[i + 1][h], dp[i][h]);
		chmin(dp[i][max(0, h - A[i])], dp[i][h] + B[i]);
	}

	cout << dp[N][0] << endl;
}





/* ///////////////////////// writeup1 start
# 前提知識
- [動的計画法](https://www.hamayanhamayan.com/entry/2017/02/27/021246)
///////////////////////// writeup2 start
制約と最小化でDPかなという感じがする。
雑な初手であるが、DPをむちゃくちゃやったらこういう思考になる。
10^3というのは微妙な制約であり、O(N^2)が回る。
そして、体力と魔力の関係を見ると、ナップサック問題な印象を受ける。
言い訳はこれくらいでいいか。

DPであることが分かれば、DPテーブルは立てやすいかもしれない。
dp[i][h] := i番目の魔法まで使い終わって、残りの体力がhであるときの、消費魔力の最小値

自然な遷移として、
魔法を使わない dp[i][h] -> dp[i+1][h] の遷移と、
魔法を1回使う dp[i][h] -> dp[i+1][h-A[i]] の遷移が思いつくだろう。

ここまではあまり難しくないのだが、ここから始めて体験する場合は難しく感じるだろう。
今回の問題では、魔法を何回でも使用することができる。
よって、i番目の魔法を使ったとしても、再度i番目の魔法が使いたくなる。
遷移を dp[i][h] -> dp[i][h-A[i]] として考える。
この遷移が問題ないかを考えて見る。
DPの遷移で重要なのが、遷移関係がDAGを成すという部分である。
通常のDPであれば、i<i+1で必ず方向が定まるのでいい。
今回のDPであれば、それに加えて、hの方の遷移は数が小さくなる。
数が小さくなるのであれば、順序関係が定まり、DAGを成すということである。
まあ、この辺の理解はふんわりできてればいいので、ループが無いなくらいの確認でもいい。

まとめると、遷移は、
魔法を使わない dp[i][h] -> dp[i+1][h] の遷移と、
魔法を1回使う dp[i][h] -> dp[i][h-A[i]] の遷移を行えばいい。
DPの更新順序に注意する必要がある。
iは昇順に更新するが、hは大きい数から確定していくので、降順で更新しよう。
///////////////////////// writeup2 end */
